/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 15.04.2022 14:33:25

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 17792;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[21];
TfLiteEvalTensor tflEvalTensors[21];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[10];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,1600 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0029411765281111002, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 40, 40, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 800, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data3[8*3*3*1] = { 
  /* [0][0][][] */ -21, 39, -40, 
  /* [0][1][][] */ 89, 89, 77, 
  /* [0][2][][] */ 77, 127, 114, 
  /* [1][0][][] */ -44, -44, -86, 
  /* [1][1][][] */ -97, -32, -81, 
  /* [1][2][][] */ -64, -127, -79, 
  /* [2][0][][] */ -12, -74, -91, 
  /* [2][1][][] */ 69, -127, -106, 
  /* [2][2][][] */ -109, 50, -62, 
  /* [3][0][][] */ 17, 56, 57, 
  /* [3][1][][] */ 127, 114, 84, 
  /* [3][2][][] */ 3, 79, 30, 
  /* [4][0][][] */ 39, 12, -76, 
  /* [4][1][][] */ 50, 49, -127, 
  /* [4][2][][] */ 33, -20, -73, 
  /* [5][0][][] */ 127, 122, 118, 
  /* [5][1][][] */ 37, 63, 89, 
  /* [5][2][][] */ -22, 11, 84, 
  /* [6][0][][] */ -36, -38, -27, 
  /* [6][1][][] */ -47, -20, -5, 
  /* [6][2][][] */ 61, 25, -127, 
  /* [7][0][][] */ -49, -107, -68, 
  /* [7][1][][] */ 2, -19, -127, 
  /* [7][2][][] */ -90, -47, -62, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant3_scale = { 8, { 0.0024362180847674608, 0.003147834213450551, 0.0027397186495363712, 0.0035772321280092001, 0.0024168977979570627, 0.0019594694022089243, 0.0037799591664224863, 0.0022689925972372293, } };
const TfArray<8, int> quant3_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[8] = { -19626, 1071, 5427, -10880, -7772, -18642, 8205, -7713, };
const TfArray<1, int> tensor_dimension4 = { 1, { 8 } };
const TfArray<8, float> quant4_scale = { 8, { 7.1653475970379077e-06, 9.2583359219133854e-06, 8.0579966379445978e-06, 1.0521271178731695e-05, 7.1085232775658369e-06, 5.7631455092632677e-06, 1.1117526810267009e-05, 6.6735078689816874e-06, } };
const TfArray<8, int> quant4_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[16*3*3*8] = { 
  /* [0][0][][] */ -1,-87,-61,84,-43,-68,44,-25, 75,-48,-84,0,-14,-72,15,-30, 43,-127,26,31,12,10,50,-11, 
  /* [0][1][][] */ 35,35,-36,37,-9,-10,-43,52, 2,47,47,-1,-23,-30,-65,-52, -70,-10,-91,5,76,25,14,10, 
  /* [0][2][][] */ 21,-21,-57,54,-8,-81,-3,43, 58,-22,-52,4,-24,-40,-39,-56, -36,-49,-67,19,-26,-26,24,34, 
  /* [1][0][][] */ -37,47,-30,-39,19,-24,22,-1, -30,-87,-32,12,-42,15,14,-54, 13,32,44,34,50,-15,2,5, 
  /* [1][1][][] */ 26,-127,-22,23,8,21,-16,-25, -32,-9,42,-1,15,-1,-27,-36, -40,21,68,-26,5,-41,57,31, 
  /* [1][2][][] */ 23,-61,12,17,-45,-5,-26,-52, -25,-39,-6,-13,-15,-36,-10,-58, -43,12,27,1,55,-42,56,-13, 
  /* [2][0][][] */ -122,70,-28,-113,55,-1,-12,-12, 41,49,-26,53,13,18,-65,90, -36,-75,-50,-70,2,34,19,-3, 
  /* [2][1][][] */ 38,-45,26,59,9,31,-12,-75, 125,-76,-60,57,-11,5,-40,-2, 90,-127,-5,79,-15,16,-83,27, 
  /* [2][2][][] */ -77,21,68,-106,13,35,48,-16, 54,-44,-22,46,-14,117,-36,-45, 19,18,32,-29,-50,-35,14,24, 
  /* [3][0][][] */ -56,-66,-25,-26,-53,17,-107,13, -49,-55,14,10,16,-12,42,-21, -19,-101,30,-19,-36,-7,31,-29, 
  /* [3][1][][] */ -22,-121,-42,29,46,-38,-14,15, -45,12,75,-51,-21,-44,28,-21, -42,-26,-38,1,-33,-18,-16,-38, 
  /* [3][2][][] */ -61,-127,6,35,-62,17,-121,-86, -80,-14,26,-6,-26,-69,49,-48, -42,-47,-12,-60,-37,10,10,10, 
  /* [4][0][][] */ 11,52,-3,4,18,-25,-2,33, -1,-73,-51,28,-97,24,-82,9, 55,-113,-23,55,-17,64,-103,29, 
  /* [4][1][][] */ -13,9,-52,0,-32,1,-78,-53, -8,-29,-14,2,-13,65,-115,-26, -6,-111,-127,38,-54,20,-102,-27, 
  /* [4][2][][] */ 13,-28,-45,7,-39,-8,-60,2, 50,-8,-110,40,-46,5,-79,11, 28,17,-37,28,-9,19,-98,-35, 
  /* [5][0][][] */ 16,-97,-75,4,0,25,-38,21, -40,-72,-56,3,15,11,-31,-23, -47,10,42,-43,22,-50,-4,34, 
  /* [5][1][][] */ -37,-58,18,-3,-61,-24,-19,12, -25,-28,-1,-36,10,-43,-34,-39, -53,21,-5,-19,-18,-27,41,4, 
  /* [5][2][][] */ -31,-127,-15,37,-40,35,-86,-44, -38,18,21,-55,16,6,66,-13, -55,-18,23,5,22,-3,63,4, 
  /* [6][0][][] */ 16,39,45,24,22,-15,-50,59, 73,-16,-32,9,-26,127,-56,-62, -4,-16,-47,18,60,10,-41,-23, 
  /* [6][1][][] */ -7,17,11,-84,-73,-16,23,7, 87,17,-33,41,-31,28,61,-25, -1,-12,-12,-2,-8,26,10,-23, 
  /* [6][2][][] */ -41,39,-12,-30,31,30,-14,42, 77,19,-67,26,-74,101,-72,12, 50,-39,-78,51,45,56,-20,33, 
  /* [7][0][][] */ -78,-70,65,-46,-47,46,37,21, 1,-79,-67,-14,84,6,57,-82, -127,-59,-58,-29,38,-26,-38,57, 
  /* [7][1][][] */ -1,-5,-75,-1,37,34,-36,-61, -69,27,72,-2,20,-81,1,-37, 3,-87,-56,42,64,-72,10,-82, 
  /* [7][2][][] */ 28,35,68,-14,2,-111,-95,33, -110,-6,-20,37,-88,-75,-51,-22, 8,-10,82,-121,-13,-36,-25,27, 
  /* [8][0][][] */ -92,-67,67,-52,-69,-37,-56,90, -22,-80,-117,87,59,22,33,49, -4,-108,42,-107,-45,-68,40,34, 
  /* [8][1][][] */ -61,-96,-89,-63,47,-119,-33,41, 59,-60,5,-36,52,52,-54,63, -69,55,-54,42,-91,-40,15,-18, 
  /* [8][2][][] */ -12,-40,-66,73,-121,-127,27,14, -58,42,-12,-90,-97,-90,-124,-96, -47,-42,-91,-18,-61,-67,-59,-28, 
  /* [9][0][][] */ -42,-74,-7,-39,32,40,-127,-43, -20,28,28,-86,6,17,25,-83, -84,-26,42,-6,11,-35,16,-22, 
  /* [9][1][][] */ -72,30,5,64,30,-10,-50,-73, 8,20,-38,21,-27,71,4,-16, -41,-54,-54,-26,25,25,-111,18, 
  /* [9][2][][] */ 0,-19,-7,-20,-59,73,-1,35, -72,-50,-120,-64,67,-43,6,54, 57,-108,-105,-79,15,25,-33,-64, 
  /* [10][0][][] */ 68,-77,-35,78,-67,85,-77,-5, 68,-39,24,41,92,21,80,-41, -54,-14,33,-96,26,-90,35,-21, 
  /* [10][1][][] */ 86,-88,-47,100,-74,65,-72,-35, 22,-94,16,-4,68,-35,8,-22, -108,16,5,-91,51,-104,10,51, 
  /* [10][2][][] */ 87,-114,-104,127,-19,104,-69,-53, 30,-49,36,10,39,-6,57,-12, -57,-36,50,-109,-18,-111,21,-30, 
  /* [11][0][][] */ -10,-15,28,7,4,-49,42,7, -37,21,51,-35,-6,-25,53,17, 27,-5,-25,54,0,6,24,-33, 
  /* [11][1][][] */ -30,-44,4,3,13,13,27,-12, -41,-71,52,-2,-12,-23,29,-83, 36,-48,-8,-3,-13,30,26,-4, 
  /* [11][2][][] */ -45,-127,-12,30,33,2,6,-82, -40,-39,5,-9,-25,-28,8,-77, -11,-42,15,45,7,39,10,-63, 
  /* [12][0][][] */ 55,-34,-114,-46,32,55,7,-107, -59,-10,67,-29,36,-111,28,19, -24,14,-45,-80,-20,34,4,96, 
  /* [12][1][][] */ -103,54,-43,28,29,64,-65,4, 31,-56,45,-127,32,9,-97,23, 78,15,-126,16,-1,-94,-113,67, 
  /* [12][2][][] */ -62,-100,78,-9,-37,-15,-49,85, -49,-64,-20,-15,-77,-56,-96,-54, -63,73,-38,34,-64,-82,-70,-26, 
  /* [13][0][][] */ -71,42,-15,-35,-51,-122,2,-13, -89,19,48,-86,37,-81,-42,15, -75,-4,-14,-60,-5,-88,52,10, 
  /* [13][1][][] */ -27,28,49,-72,13,-74,51,45, -87,53,21,-127,-30,14,-26,12, 4,-19,43,-109,-8,-74,44,8, 
  /* [13][2][][] */ -49,75,19,-93,-10,-47,83,37, -30,16,-3,-82,40,-61,43,-12, -119,48,52,-83,43,-57,18,63, 
  /* [14][0][][] */ -32,-122,12,5,-84,38,-103,-127, 4,-35,-75,5,35,-36,-8,-64, -54,45,75,-74,-9,-16,12,-26, 
  /* [14][1][][] */ -83,-84,31,-60,-22,-48,-21,-55, -73,-2,1,-23,-70,-64,10,-45, 17,12,-78,52,-68,-75,48,-54, 
  /* [14][2][][] */ -6,-12,-48,28,-47,-70,-46,-10, 20,28,61,-24,16,-50,-72,-16, 15,-10,59,-31,33,-4,38,-83, 
  /* [15][0][][] */ -43,68,23,-54,-11,-127,-2,34, -43,53,20,-72,32,-43,56,19, -31,29,52,-91,2,-68,10,55, 
  /* [15][1][][] */ -56,49,24,-100,-5,-94,26,-2, -30,43,4,-54,-6,-34,33,37, -48,27,40,-83,6,-32,50,31, 
  /* [15][2][][] */ -99,30,17,-58,18,-61,-34,25, -11,67,58,-56,17,-50,10,-7, -35,49,2,-60,6,-54,50,43, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 16,3,3,8 } };
const TfArray<16, float> quant5_scale = { 16, { 0.0025654789060354233, 0.0043653938919305801, 0.0024416239466518164, 0.0030952377710491419, 0.0038226642645895481, 0.0038414718583226204, 0.002772356616333127, 0.0017884373664855957, 0.0015543641056865454, 0.0019505493110045791, 0.0035940466914325953, 0.0041242660954594612, 0.001542074023745954, 0.0027497522532939911, 0.002495030639693141, 0.0045222518965601921, } };
const TfArray<16, int> quant5_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[16] = { -5600, 5766, -4632, -765, -6835, -1447, -4634, -6875, 225, -5111, 410, 8482, -6043, -3682, 6205, 998, };
const TfArray<1, int> tensor_dimension6 = { 1, { 16 } };
const TfArray<16, float> quant6_scale = { 16, { 1.1358796655258629e-05, 1.9328017515363172e-05, 1.0810422281792853e-05, 1.3704332559427712e-05, 1.6925052477745339e-05, 1.7008323993650265e-05, 1.2274758773855865e-05, 7.9184028436429799e-06, 6.8820313572359737e-06, 8.6361624198616482e-06, 1.5912835806375369e-05, 1.8260410797665827e-05, 6.8276162892288994e-06, 1.217467706737807e-05, 1.1046882718801498e-05, 2.0022514945594594e-05, } };
const TfArray<16, int> quant6_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[32*3*3*16] = { 
  /* [0][0][][] */ -43,13,1,-24,-34,-50,-1,32,-3,-31,-92,66,-29,40,57,20, 17,-17,-21,-52,2,-31,7,25,-7,28,-53,-14,-37,-34,-59,-40, 44,-15,5,-13,15,28,13,-1,-34,16,4,-58,-6,-14,-34,35, 
  /* [0][1][][] */ -49,4,-37,9,-30,-5,-60,1,-26,-5,-45,58,-6,10,18,37, -17,-71,-41,9,-44,15,6,-30,-30,7,-37,-50,-27,-29,-24,3, 14,-52,3,-39,-14,5,-7,2,3,30,-19,-98,18,2,12,-22, 
  /* [0][2][][] */ 7,-2,-8,50,-50,-27,-38,-7,-31,-9,-91,38,37,-25,37,32, -16,-82,-42,-73,-25,-55,-37,11,15,16,-32,-22,-37,-77,-34,-19, -18,-52,-8,5,23,43,39,-34,12,8,-25,-127,-36,8,-80,-77, 
  /* [1][0][][] */ 48,-38,22,-55,78,-48,44,-23,-14,24,-79,-30,31,-54,-29,-114, 24,-39,-1,-3,-41,31,9,0,2,20,-8,-29,21,-31,-39,-41, -27,95,-21,48,-127,52,-37,-13,-2,-3,89,56,-20,11,9,26, 
  /* [1][1][][] */ -1,-26,33,-48,58,-39,36,-8,-6,-21,-38,-1,15,-80,-42,-85, 2,-8,-16,26,-13,-5,-23,-19,-28,2,-12,-34,16,-13,7,-16, -20,75,-22,25,-100,27,-25,-30,-5,17,80,39,-25,3,24,37, 
  /* [1][2][][] */ 48,-41,44,-53,63,-25,60,15,-9,-4,-58,-24,-14,-54,-11,-92, 2,21,-6,-16,-24,0,4,12,-32,-14,42,6,-11,-33,-26,-14, -35,86,-29,39,-97,38,-57,-9,24,-15,110,62,-18,26,45,70, 
  /* [2][0][][] */ -27,81,20,4,-16,28,15,-1,-13,-31,-51,124,-10,-30,70,64, -33,-40,-43,2,17,-47,-8,-34,-1,7,-77,-14,-21,-32,-37,-40, 42,-54,57,0,55,2,68,-27,-37,3,88,-63,24,-47,-74,-61, 
  /* [2][1][][] */ 5,23,20,37,-49,23,-7,-2,5,10,-54,86,15,-19,40,17, 2,-24,-40,-7,12,-63,-58,-26,-24,1,-36,-24,-26,-44,-46,-74, 5,-7,25,-37,70,-24,4,23,11,-26,48,-88,36,-40,-23,-34, 
  /* [2][2][][] */ -4,66,19,25,-54,-2,16,14,44,-16,-66,115,-12,-18,21,-1, -40,-58,-26,-48,40,-23,-20,27,-4,2,-98,-46,-24,-47,-35,-74, 14,-52,45,-4,98,-11,75,-10,-1,16,127,-60,6,-45,-47,-43, 
  /* [3][0][][] */ -23,-45,2,15,45,2,30,-29,11,-6,-17,30,15,-65,32,-8, 26,-41,-17,0,5,-2,15,-37,-6,27,-17,-40,16,-20,0,-112, 6,-2,47,-27,-50,27,38,-2,-20,-30,91,-75,-14,-33,2,-115, 
  /* [3][1][][] */ 3,2,16,-10,22,-11,-16,-17,-29,-29,-50,-7,-32,-8,27,11, -42,-25,-5,-39,-24,-15,4,-33,-21,30,-4,-14,-31,31,-51,66, 0,-55,5,30,-9,30,12,-34,-37,0,61,-34,1,11,-48,-62, 
  /* [3][2][][] */ 6,20,3,-39,-11,9,27,30,14,25,-20,0,-7,-86,14,-127, 3,-78,-29,-31,52,40,8,28,3,-26,2,-56,-20,-12,-71,-26, -8,-17,31,0,-17,14,31,8,-9,-19,93,-45,21,-71,-54,-121, 
  /* [4][0][][] */ 45,39,-13,55,-20,66,30,-11,12,27,87,6,-8,-21,38,-32, -42,-9,-55,-21,-92,20,-59,24,5,17,-28,-4,2,17,34,28, -89,-12,-90,-24,-25,-11,-54,28,26,-18,-48,11,-2,74,6,91, 
  /* [4][1][][] */ 9,-6,-8,12,-40,-7,-6,-10,-3,11,84,22,-18,-23,18,-23, -52,3,-75,22,-41,16,-33,20,-6,-10,-7,-30,-11,-50,-29,-11, -95,-24,-69,-24,-11,-25,-117,9,20,28,-43,-31,12,3,-19,35, 
  /* [4][2][][] */ -5,13,-22,12,41,59,-30,-5,-23,-18,85,-8,-14,-2,9,11, -69,-18,-22,-10,-28,12,-90,29,-20,12,-31,-33,16,39,-16,-1, -127,17,-86,-9,-3,40,-104,-1,13,20,-38,-31,21,30,33,54, 
  /* [5][0][][] */ 19,-33,53,-27,78,17,58,23,5,0,39,-52,-11,-40,-20,33, 14,-48,-26,24,-30,-10,-32,-23,22,5,24,3,-14,-34,3,-59, -4,30,-5,32,18,8,18,27,-16,-8,51,-28,19,-11,10,-91, 
  /* [5][1][][] */ 32,-51,33,-28,66,13,26,-14,35,-5,7,-76,-9,-61,-27,-3, -30,-21,-29,29,-41,22,-23,11,2,-2,0,-12,-20,-44,-35,-84, 21,48,18,9,4,21,26,22,2,23,57,-5,6,-43,-17,-72, 
  /* [5][2][][] */ -13,-61,18,-28,127,13,21,-10,-1,20,17,-50,26,-58,10,59, -46,-15,-83,33,7,3,-67,-22,23,-11,22,-9,30,-38,-5,-57, -1,33,-32,6,11,13,6,13,-9,20,44,11,27,-23,-22,-82, 
  /* [6][0][][] */ -29,35,-16,15,-26,-25,13,14,7,15,-42,87,-16,34,48,107, 6,-32,-6,-11,-41,8,-69,11,-6,12,-79,-5,-13,26,-85,-55, 30,-12,-11,-21,-6,-13,20,4,0,-31,59,-100,11,-29,-18,-119, 
  /* [6][1][][] */ 33,69,47,33,-29,-50,9,-37,-11,-5,-98,115,12,27,42,107, 26,-62,11,-39,-24,13,-55,-34,-60,-39,-40,-10,28,6,5,53, -32,-13,56,54,10,-1,39,25,-12,24,102,-127,0,-40,-25,-82, 
  /* [6][2][][] */ 21,56,39,-22,28,3,7,-38,-22,-6,-59,77,-29,-43,33,14, -4,-73,4,-5,-14,-30,-7,-9,18,-14,-22,3,-28,-54,-48,-86, -7,-33,43,-4,68,-26,45,21,26,8,70,-79,-9,-37,8,-58, 
  /* [7][0][][] */ -61,40,-69,35,-70,13,-79,-2,24,25,-7,36,-6,-3,36,88, -94,-8,-88,-18,-35,5,-105,-6,21,16,-12,28,-18,14,-22,25, -118,-42,-66,-23,-5,-18,-124,31,20,-18,-99,-27,16,60,-47,65, 
  /* [7][1][][] */ -70,-3,-50,15,-25,-17,-70,4,8,-20,8,9,11,22,22,48, -76,4,-117,-6,-40,-20,-60,-7,-4,-21,-59,-21,24,-16,-2,12, -86,-12,-78,-26,-45,-33,-114,-13,18,-6,-82,-40,-6,32,-41,13, 
  /* [7][2][][] */ -100,20,-32,-22,-33,11,-82,47,-10,12,-5,-16,6,44,13,30, -90,14,-54,-30,-18,-10,-94,21,18,-12,-9,19,19,11,20,54, -108,-19,-107,-33,-10,-13,-127,-9,27,-23,-24,-14,-23,55,-3,75, 
  /* [8][0][][] */ 6,35,18,86,73,-78,-5,-73,62,-4,-38,-64,61,-82,91,-13, -91,-83,-97,-61,26,-77,-36,21,97,50,-11,38,-72,-89,-16,36, -74,49,-75,-8,60,-49,21,19,49,26,-58,3,-25,-90,-74,-5, 
  /* [8][1][][] */ 65,-24,-107,36,25,-60,-20,-61,-54,-2,-93,44,35,-70,-116,-123, -102,-57,56,-67,61,-127,-75,24,-68,8,-117,-83,-26,-89,-117,20, 12,20,-82,-75,-104,-6,-55,30,6,-80,6,16,-59,-54,-79,6, 
  /* [8][2][][] */ 49,51,-86,-52,-7,-83,-90,-8,-30,56,11,-104,62,-89,-36,11, -61,-21,-101,-91,37,35,66,-123,29,-6,49,-91,-55,-12,-20,4, 23,33,42,-93,1,-77,8,-81,-97,39,46,20,12,-96,-71,-82, 
  /* [9][0][][] */ 48,-116,-45,-108,-118,-19,-36,-32,-37,59,58,-122,49,59,46,-107, 12,-103,-71,-24,-4,-25,-51,-68,-84,-106,47,-64,12,23,-81,-25, -51,18,-126,-57,47,43,48,-56,32,15,-114,-13,49,-18,15,-82, 
  /* [9][1][][] */ 29,22,64,35,-90,56,-54,-63,-62,-81,-76,-60,-13,-93,8,-16, 17,-81,-80,-5,-1,16,-88,0,10,-25,-98,22,-45,29,16,14, 30,14,-71,-98,-23,25,33,-28,-71,61,-43,1,5,49,-82,-71, 
  /* [9][2][][] */ -11,-84,-110,-83,44,-3,-12,-55,7,43,61,-88,2,63,3,-51, -28,-127,-45,-83,-37,24,-104,-100,-62,-23,-16,48,-53,68,-60,-37, -37,-93,-31,24,-68,-33,-10,-115,58,-52,64,72,-88,-72,-112,67, 
  /* [10][0][][] */ -38,15,-59,10,-22,-29,-50,-48,-10,6,-43,-35,20,-12,1,10, -13,-25,-45,-23,-74,-8,-67,-31,13,1,-48,-76,47,2,28,-22, -43,-91,-71,-38,1,-47,-71,-34,-56,-38,2,-87,18,-71,-14,-30, 
  /* [10][1][][] */ -59,-46,-42,-54,-37,-88,-1,10,-20,26,-45,-19,-35,-10,0,-41, 5,-46,11,3,19,-65,-30,-6,-55,-22,-43,-40,-24,-34,-104,-18, 8,-40,11,-9,7,-61,31,1,31,7,23,-52,-29,11,-60,-30, 
  /* [10][2][][] */ -25,-40,-44,-66,-61,-22,-35,-25,-27,36,-52,-71,-18,-19,-39,-30, -19,-58,30,-28,36,1,17,-19,37,-10,-16,-65,4,9,-48,-8, 8,-45,18,5,0,-50,38,-38,8,36,-19,-127,-42,-38,-22,13, 
  /* [11][0][][] */ 19,-70,-2,-66,-8,-57,40,-35,-46,-23,43,-80,-41,-48,-19,-35, 37,-78,-48,-26,19,-15,16,-6,21,-44,-14,-65,22,-10,-73,-9, 25,5,33,-59,89,20,61,-23,-14,19,-5,-88,-5,-56,-27,14, 
  /* [11][1][][] */ 37,-47,40,-46,41,-69,41,-4,-30,27,76,-127,-30,4,-18,-51, 18,-76,-21,-12,22,27,-56,-30,-14,36,36,-74,-23,3,-70,-48, 18,-105,36,-43,86,-37,37,-41,-22,-15,-15,-43,-40,21,-81,-43, 
  /* [11][2][][] */ 2,-65,30,-34,45,-14,-12,34,-6,-7,24,-68,30,-36,-25,-76, -32,-13,-53,-61,-33,-57,-13,-11,-13,22,10,-24,-18,1,-23,-8, -16,-69,-23,24,30,-36,-6,0,16,15,-41,-68,-9,-28,-60,-44, 
  /* [12][0][][] */ 31,-23,42,-21,5,0,47,-11,7,-10,14,-11,25,-21,-10,-40, 2,6,-47,27,-93,-4,-44,16,11,-6,4,-35,1,14,-25,-55, 1,-37,-10,-29,11,-25,1,-21,5,-9,-92,-36,5,-10,-4,-25, 
  /* [12][1][][] */ 32,-42,6,-20,2,-5,20,7,21,19,28,-51,-3,6,2,-28, 6,-28,-16,14,-81,8,-34,0,-10,24,7,-42,-16,8,-7,-34, -21,-37,-9,-12,21,-12,-5,0,-4,-11,-127,3,-12,20,-2,2, 
  /* [12][2][][] */ 39,-24,24,-12,39,-19,20,15,5,-5,22,-52,-5,-8,3,8, -21,5,-39,3,-101,-4,-48,12,1,5,24,-16,-1,-13,18,-24, -23,-37,10,-19,31,-14,19,5,0,17,-116,-29,16,-8,10,9, 
  /* [13][0][][] */ 6,-78,-23,-9,5,-4,5,14,-50,23,22,-35,-34,1,-21,-80, 15,-41,-13,52,-71,-19,5,-23,-40,9,58,-45,-43,9,-82,-121, 33,-23,27,24,-2,-21,-40,-24,-3,-25,-28,-124,30,13,-22,-76, 
  /* [13][1][][] */ 27,-17,-30,-27,22,40,19,-14,-26,39,8,18,2,-29,-4,0, 21,-43,-19,-12,-26,49,-44,-33,-21,-3,73,-26,-45,8,-14,-65, -38,-23,-14,40,6,-20,17,-2,-19,38,1,-111,-27,-42,-73,-68, 
  /* [13][2][][] */ 16,-69,17,18,-11,-28,-19,26,-68,-36,55,-4,45,3,-30,-120, -22,-30,16,-13,-25,41,-39,6,-54,-2,40,-73,-35,-42,-6,-127, 31,-83,16,-27,18,-21,38,-33,-33,5,-32,-38,-40,2,19,-105, 
  /* [14][0][][] */ 49,2,18,50,29,-103,-11,-24,38,5,34,-16,13,-24,-55,-93, -7,-30,-25,-15,48,-69,-25,-26,-22,-25,28,-7,-10,-30,-23,-49, 7,-50,-13,0,3,-49,12,-57,30,-16,-23,-55,-28,-63,-55,7, 
  /* [14][1][][] */ 41,-44,-32,47,5,-50,-24,-2,-7,-34,16,-1,6,-26,-19,-60, 23,-30,-31,-53,16,-82,-18,11,-6,-20,-19,-43,27,9,-50,11, -11,-65,-15,15,38,-30,28,29,-38,-11,-10,-28,20,-62,-52,-72, 
  /* [14][2][][] */ -25,-93,-5,11,-3,-64,-37,-13,-12,-16,-43,-68,3,-44,-80,-27, 15,-79,2,2,-10,-41,-19,-30,-1,-29,-20,-127,20,-102,-84,-46, 13,-109,-17,-53,15,11,15,-20,12,-10,-22,-45,25,-80,-85,-86, 
  /* [15][0][][] */ -43,-81,-107,30,-20,-14,-24,58,-53,-101,-1,-51,-66,-67,-77,23, -25,-40,35,-56,-55,16,-18,54,10,10,-28,21,44,-27,16,2, 49,-73,-69,-14,-39,41,-82,-34,3,-91,0,13,39,7,-27,-7, 
  /* [15][1][][] */ -75,-18,-99,-84,-42,55,26,-1,-71,-100,-84,-83,-56,-23,42,-104, 3,26,-87,-102,-91,-85,-127,-102,2,-108,-11,-14,27,-23,20,30, 54,-46,-71,50,-66,-51,17,-28,51,37,-59,-61,18,-17,27,-103, 
  /* [15][2][][] */ -9,-92,-26,47,-37,-96,-32,-89,-73,-46,27,-14,8,65,-51,50, -81,34,31,53,-25,-16,24,62,-75,31,-28,-81,7,-58,17,25, -23,-71,-71,-47,38,30,-74,-30,42,-40,-55,48,31,-56,10,-34, 
  /* [16][0][][] */ 22,-28,14,11,16,-7,38,-2,12,9,42,-52,17,-49,-9,-79, -36,6,-42,6,-72,3,-36,9,18,14,8,24,10,2,18,-26, -8,9,31,1,78,-5,-1,-16,12,15,-87,15,5,-25,16,0, 
  /* [16][1][][] */ 34,-25,13,-28,18,-9,37,-23,1,-15,44,-33,18,-36,0,-45, -18,51,-37,32,-102,33,-27,9,9,-15,29,40,-2,-14,35,-4, -16,-30,-7,-26,36,-55,6,10,-9,-3,-110,-5,6,-15,-15,-36, 
  /* [16][2][][] */ 29,6,36,-1,20,-9,22,-25,-15,17,87,-44,-18,0,-6,-37, -33,21,-62,28,-85,19,-56,4,19,-6,12,37,-8,-29,23,6, -7,-15,26,-19,36,-46,21,-13,20,10,-127,12,-3,-32,-13,-18, 
  /* [17][0][][] */ 6,-75,-41,-17,13,-77,43,26,34,58,-83,-90,75,-72,-26,48, -20,-44,-51,12,-85,-22,-31,-8,54,-20,-63,-78,-9,-21,-80,3, 46,33,50,-93,-12,16,8,-40,33,-17,-64,34,-12,-50,-44,-54, 
  /* [17][1][][] */ -12,-13,-31,-53,-59,-58,-62,-52,-21,-45,-43,-22,7,9,-41,-8, -85,6,43,-17,13,-59,-38,3,3,38,32,-3,37,-6,40,-15, -49,-47,4,-65,-20,-36,23,51,-20,39,-127,-14,-35,38,14,-4, 
  /* [17][2][][] */ 34,-80,28,-77,7,43,52,22,20,53,-39,-80,-51,-1,37,20, 12,-53,-1,-60,-62,-56,-69,-29,-73,-49,-10,-46,-29,-45,-13,-48, 25,26,17,-100,-30,-2,15,-31,-97,16,-98,16,-2,13,-66,39, 
  /* [18][0][][] */ 1,-108,-8,-75,-80,-57,-2,-42,-28,-36,-51,-12,-38,-18,38,-5, 41,-12,34,-23,7,-100,28,-57,-7,-19,-108,-93,-69,-55,-9,-70, -67,-42,-35,-59,41,39,-72,-49,-43,37,-16,-9,-64,14,-64,42, 
  /* [18][1][][] */ -118,27,-12,-10,-61,-61,-39,-3,3,-63,-127,-20,19,2,6,-72, -47,8,9,-32,-20,7,-23,-19,-29,-16,-67,-70,-33,6,-59,-65, -66,-13,-63,22,-46,13,-50,-56,-20,-1,9,-18,-65,-13,-36,-47, 
  /* [18][2][][] */ -92,14,-88,-10,-66,-65,-50,-58,-18,-60,-7,-42,8,-29,0,4, -6,-63,-44,-62,16,-30,-99,-41,-29,40,11,-22,35,-71,-36,-58, 10,-12,26,-54,-4,30,-16,-15,37,-65,-28,-62,-47,-32,17,-51, 
  /* [19][0][][] */ -21,-60,11,-64,-54,-98,-40,20,-2,30,-80,-38,-36,-48,-56,-29, -32,-90,-47,-51,-41,-66,-34,-22,-25,0,-59,46,-10,-108,-47,-96, -46,36,-8,45,16,11,-88,-51,-5,-24,59,-18,6,-30,28,-53, 
  /* [19][1][][] */ -48,-127,-28,11,41,-16,-69,33,12,-59,-19,-91,10,-105,-85,-79, -6,-29,-31,-5,-63,-85,-45,-65,-14,-42,-44,-90,-42,-105,-12,-119, -3,9,-9,2,13,16,4,30,-25,-42,-56,-4,-45,-16,-26,10, 
  /* [19][2][][] */ -67,-30,-67,-35,34,-41,-49,19,5,37,-97,-111,40,-21,-71,-1, -18,-20,-75,-19,-2,-81,-36,32,-42,58,-10,-56,-17,-92,-88,29, -7,10,-67,-6,-11,-31,22,-50,-25,-36,-23,2,14,19,-54,-63, 
  /* [20][0][][] */ -2,8,17,-11,37,-44,22,0,29,12,-52,-3,-11,-22,-23,-31, -16,-14,39,-13,15,6,29,-13,9,18,40,-53,12,-6,-36,-9, 0,63,-7,11,-127,33,-21,28,-25,42,105,8,4,2,-19,-84, 
  /* [20][1][][] */ 22,-6,2,-1,45,-7,36,10,12,20,-48,38,4,-53,-15,-24, 20,-37,-17,-2,4,3,-11,20,-20,16,52,-35,-15,-8,-46,-29, 5,30,9,21,-103,20,19,3,-3,20,83,-9,8,-38,2,-47, 
  /* [20][2][][] */ -2,-45,11,-27,47,-10,52,-17,14,-16,-28,-1,-23,-25,3,30, 21,-61,-6,-29,54,-22,25,25,-31,-19,18,-44,28,-47,-14,-26, -24,29,0,-9,-80,35,-15,-33,-2,9,92,-2,17,-46,-13,-76, 
  /* [21][0][][] */ 1,-19,10,-15,20,4,-12,8,6,22,-32,-29,24,-59,-3,-60, -48,-26,-16,36,-68,37,-34,10,-17,7,18,-30,0,-35,-59,-80, -28,-1,-12,23,-116,44,-68,-24,0,-12,64,6,-28,-51,-19,-127, 
  /* [21][1][][] */ -9,-24,30,11,21,-27,28,-16,11,3,-8,-18,-34,-58,39,-33, 11,-39,-22,4,3,21,-25,-17,-14,17,18,-22,-1,-6,-28,-41, 2,73,-12,35,-93,49,26,24,-5,-2,106,-8,30,-66,-63,-90, 
  /* [21][2][][] */ 11,-6,24,-25,75,2,49,7,-20,-26,22,-59,15,-18,3,-52, 10,-31,-47,46,0,-9,-32,-14,21,0,46,-50,13,9,-16,-69, 7,81,-20,21,-39,61,-35,-24,-27,-34,126,-35,-37,-63,-41,-123, 
  /* [22][0][][] */ 18,-86,24,-31,23,-49,33,22,-6,45,-31,-68,4,-38,-58,-27, -43,-27,6,4,-9,23,28,-23,-11,-27,-26,-111,23,-47,-55,-32, 14,-79,-23,5,-47,21,39,-15,-42,5,-25,-95,19,23,-73,-58, 
  /* [22][1][][] */ 16,-34,24,-78,-16,-75,-22,-36,-23,45,-30,-97,8,4,-29,-56, -30,-65,-31,-17,-32,-69,14,-37,2,-50,-29,-84,17,0,-17,18, -3,17,33,-73,-18,15,4,15,-24,24,-7,-23,35,27,-65,-39, 
  /* [22][2][][] */ -28,-30,-1,26,-12,-25,17,-46,-1,-43,-19,-65,-39,21,-19,-54, -46,-52,-19,-9,30,-60,1,1,-77,20,-74,-36,-18,17,-36,15, -1,-39,-39,-13,31,-18,31,-38,-38,-30,-22,-127,35,-49,-15,12, 
  /* [23][0][][] */ -43,-29,4,-22,-45,-97,-59,-5,17,-31,-112,-34,19,8,-30,-25, 32,-55,4,21,-30,-31,12,7,24,-47,-83,-35,-36,-2,-30,13, -18,-31,-6,12,-63,20,13,12,-1,27,18,44,-12,7,28,23, 
  /* [23][1][][] */ -54,-52,-53,-1,-46,-47,-75,4,10,-42,-117,-57,31,-31,23,-57, 52,-38,-40,14,37,-62,-20,-70,66,-47,-32,-12,-20,-85,-43,-86, -26,6,-4,20,46,8,-36,25,-68,-5,16,16,-21,-2,38,-19, 
  /* [23][2][][] */ -20,-44,3,-6,-6,-64,-63,21,-43,25,-127,-30,13,-34,-27,-33, 8,-34,-69,12,-32,-48,-61,-40,24,-18,-41,-94,6,5,-42,-23, -23,-9,-36,-7,-81,-63,-79,20,-56,19,-63,-84,23,-51,-70,-29, 
  /* [24][0][][] */ -39,104,-39,43,-13,-47,-15,29,18,1,-101,-53,-14,-61,-34,-42, -29,-50,-63,34,-72,-41,-98,44,99,64,56,-53,51,-104,8,21, -57,-12,21,52,114,42,-54,37,15,18,49,-17,51,-127,15,-107, 
  /* [24][1][][] */ 113,-77,5,2,-53,8,-19,3,-50,-16,80,-51,-33,-37,-114,-94, -70,-78,30,-79,0,-58,-64,42,-93,-84,-91,-104,87,18,-71,-3, -39,-84,27,-4,-27,16,-55,-105,102,-30,-55,7,-73,55,-108,-62, 
  /* [24][2][][] */ 31,43,-89,-60,-50,-67,-110,54,26,-40,31,-51,-90,-33,-55,-74, 14,-13,-41,-4,-35,12,-82,60,-35,52,-43,-70,-58,-84,-12,-95, -11,-101,-108,-83,6,-17,-83,-99,0,-52,-20,-20,-24,5,22,-25, 
  /* [25][0][][] */ 22,-41,-10,-15,-17,71,-62,-30,-39,28,60,9,33,42,57,32, 1,-24,-12,-21,10,-19,-40,-45,24,-43,-88,-47,27,1,44,58, -72,-35,-26,-55,25,-22,-3,-33,-35,-21,-6,-37,22,-1,-9,-31, 
  /* [25][1][][] */ -58,-43,6,-79,23,-29,-54,-53,-47,-6,15,-4,19,-36,55,-33, -38,-69,4,-6,-18,-16,-2,1,15,6,-92,-58,-46,-65,-53,4, -24,-3,3,-60,-32,-65,-84,-23,60,-39,-8,-74,-22,-43,44,-37, 
  /* [25][2][][] */ 7,-57,-21,-3,-46,-45,-22,-6,-3,42,-84,-127,-16,-66,-41,-112, -58,-50,11,20,19,25,-57,-37,-21,-34,66,-97,-1,-23,-95,-84, -36,-50,45,-24,-19,-40,-21,11,-6,-43,-110,7,-7,-50,1,-55, 
  /* [26][0][][] */ -9,14,-39,-43,14,-23,-3,9,-13,4,-35,-20,1,12,-17,11, -44,-21,-53,16,28,-47,-5,-34,-5,-4,-25,-84,-10,-9,-8,-9, -2,-101,-20,-44,-33,-9,35,7,6,7,0,-127,-32,-8,-7,-18, 
  /* [26][1][][] */ 6,-33,-4,-7,-46,-56,5,31,-7,-33,-47,31,15,19,-28,-9, 5,1,36,-39,22,-39,26,30,-58,-22,-54,-19,-14,-23,-16,-83, 36,-95,-3,14,16,-28,13,-12,-46,12,11,-80,-1,-25,-26,-48, 
  /* [26][2][][] */ -40,37,-48,66,-56,-13,-47,7,22,-4,-17,25,7,-33,-26,49, -22,-19,-51,-33,-19,-45,-21,-8,31,2,-84,11,-44,-6,-56,-41, 3,-62,-22,-8,18,6,-28,-20,-31,19,-5,-64,-2,-42,-64,15, 
  /* [27][0][][] */ -79,-15,-89,-71,-82,20,-120,-71,45,-44,-60,-23,7,-71,-66,-19, -56,-76,-97,-65,-31,-49,-46,-64,-23,66,-21,-18,72,42,-17,-59, -97,19,-94,-35,-33,59,-50,-58,72,15,-15,-42,40,41,23,-30, 
  /* [27][1][][] */ 10,-88,23,2,19,-37,-49,-27,-53,36,-33,-34,-57,-59,41,-46, -127,-43,-18,-80,-38,-19,-4,21,47,-90,-17,-79,-40,35,-8,24, -104,-31,-14,-5,54,-24,-22,19,-37,-21,15,-89,-75,-29,-74,4, 
  /* [27][2][][] */ 46,12,-95,-42,14,23,-67,43,43,-18,-86,-65,34,-18,-33,-4, 48,37,-71,-3,-2,-18,-98,-22,-42,-62,25,49,-88,-35,9,-14, 0,-42,-28,45,-11,-88,-20,-80,-16,9,45,-90,-6,-71,-92,-44, 
  /* [28][0][][] */ 40,-17,43,10,-57,-20,13,17,5,38,43,8,-20,-40,-1,-86, -10,5,-48,-23,-102,29,-29,25,-10,23,30,-26,6,-23,25,1, -30,4,-64,-2,-14,-41,-82,18,7,3,-61,0,-18,63,22,49, 
  /* [28][1][][] */ 69,-18,27,3,3,28,31,12,-15,14,51,-10,-10,-21,-48,-109, -33,44,-1,0,-30,25,-14,10,16,-5,72,-6,-7,-7,-11,-21, -64,42,-24,25,-25,0,-60,0,3,21,-24,4,12,5,30,27, 
  /* [28][2][][] */ 77,-17,26,-19,-16,15,22,-17,-6,-6,63,-5,5,-39,-7,-127, -22,49,-44,5,-63,30,-16,1,-18,-1,24,18,24,-10,0,-22, -79,33,-62,-1,-36,-8,-52,20,-17,-5,-74,18,-13,4,22,43, 
  /* [29][0][][] */ -43,41,-26,-14,-39,3,2,-24,-20,-18,-32,-11,20,27,-20,45, -40,3,0,-34,-22,-42,-17,10,9,17,-56,-45,0,31,-41,69, -37,-29,-32,18,-31,17,-42,-41,32,1,-127,18,-15,25,15,1, 
  /* [29][1][][] */ 4,13,-60,18,-6,12,-71,9,1,-36,-75,0,-36,72,-29,88, -25,-3,20,-24,-3,-3,-30,8,-15,-35,4,8,8,56,2,35, -39,-59,-50,-29,-11,12,-45,13,-40,11,-91,-15,-8,2,-46,44, 
  /* [29][2][][] */ -31,20,-14,11,29,-24,-42,7,-33,-42,-8,-19,9,83,22,43, -10,-15,-27,16,-6,-47,-22,-2,6,-37,1,-6,-39,-12,-81,-7, -1,9,-20,-37,-35,2,-18,-33,-21,17,51,10,0,66,-20,54, 
  /* [30][0][][] */ -26,38,-14,25,-35,41,-26,26,28,-15,25,23,2,22,23,-1, -64,21,-24,-2,0,-8,-35,0,28,3,-34,3,23,-2,-6,4, -88,6,-64,5,-63,-45,-116,-4,-21,-23,-67,-50,22,51,-11,33, 
  /* [30][1][][] */ -25,23,21,2,-31,40,-12,28,33,19,64,-16,-13,-35,3,-38, -48,-13,-78,35,-21,-33,-32,26,4,-15,-24,32,19,-6,8,-31, -93,-1,-95,-16,-23,5,-109,-16,-25,21,-22,-13,11,-2,-39,8, 
  /* [30][2][][] */ -9,19,-27,18,-33,28,-33,6,4,26,-8,17,12,-37,1,-9, -46,-7,-20,10,23,3,-3,-15,26,14,2,-11,-1,-21,20,26, -117,-36,-87,-29,-10,-27,-127,-18,-17,-37,3,-44,-15,17,-19,8, 
  /* [31][0][][] */ 32,-6,49,-14,25,-42,59,-34,-35,-19,-19,1,30,-73,-19,-127, 1,-27,15,16,-50,13,-14,11,17,-7,68,14,13,-29,11,-92, -82,80,-91,-16,-75,29,-126,5,32,14,-28,44,16,-13,41,46, 
  /* [31][1][][] */ 65,-24,35,-41,-41,3,20,8,21,14,-18,-4,-15,-41,-52,-104, -11,5,4,-7,-27,2,14,7,2,21,50,-15,25,-66,-27,-78, -103,43,-89,25,-89,45,-66,31,15,-28,28,36,24,-32,44,-6, 
  /* [31][2][][] */ 84,-1,37,-15,-26,-45,15,-31,-24,-11,-11,20,0,1,-48,-61, -32,15,-27,33,-70,42,-8,4,-21,-15,38,28,-11,-19,-29,-34, -107,-5,-102,-7,-53,-48,-83,12,-6,-2,-58,46,6,-12,33,6, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 32,3,3,16 } };
const TfArray<32, float> quant7_scale = { 32, { 0.0030872391071170568, 0.0045282300561666489, 0.0040375133976340294, 0.0033288898412138224, 0.0043084165081381798, 0.0042258086614310741, 0.0030598777811974287, 0.0037537203170359135, 0.001156110200099647, 0.0011608607601374388, 0.0028450286481529474, 0.0024607244413346052, 0.0051189186051487923, 0.0027693014126271009, 0.003425197210162878, 0.0014442701358348131, 0.0052321623079478741, 0.0016765410546213388, 0.0020191972143948078, 0.0021056507248431444, 0.0041009611450135708, 0.0039675221778452396, 0.0025008262600749731, 0.0029754049610346556, 0.0013065729290246964, 0.0026021371595561504, 0.0029973711352795362, 0.001531928195618093, 0.0045324699021875858, 0.0036542213056236506, 0.0039959740824997425, 0.003849878441542387, } };
const TfArray<32, int> quant7_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[32] = { -4519, -2551, -6565, -3094, -1118, -3470, -3295, -3643, -2988, -2709, -2163, -2985, -3628, -3213, -3165, -3229, 1267, -1642, -2905, -3769, -2029, -3166, -2519, -2125, -4402, -3861, -2981, -2218, -628, -1194, -755, 548, };
const TfArray<1, int> tensor_dimension8 = { 1, { 32 } };
const TfArray<32, float> quant8_scale = { 32, { 3.514121999614872e-05, 5.1543636800488457e-05, 4.5957938709761947e-05, 3.7891866668360308e-05, 4.9041555030271411e-05, 4.810125392396003e-05, 3.4829772630473599e-05, 4.2727599065983668e-05, 1.3159694390196819e-05, 1.3213768397690728e-05, 3.2384203223045915e-05, 2.8009770176140592e-05, 5.826728738611564e-05, 3.1522220524493605e-05, 3.8988106098258868e-05, 1.6439742466900498e-05, 5.9556310588959605e-05, 1.9083619918092154e-05, 2.298398430866655e-05, 2.3968061213963665e-05, 4.6680146624566987e-05, 4.5161246816860512e-05, 2.846623829100281e-05, 3.3868240279844031e-05, 1.4872371139063034e-05, 2.9619433917105198e-05, 3.4118278563255444e-05, 1.7437530914321542e-05, 5.1591898227343336e-05, 4.1595027141738683e-05, 4.548510696622543e-05, 4.3822139559779316e-05, } };
const TfArray<32, int> quant8_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[2*800] = { 
  37, -13, 76, 8, -66, 0, 59, -92, -15, 2, -50, -2, -27, 5, 23, -10, 17, 8, -31, -49, -8, 24, 31, -17, -11, -12, 30, -1, -63, -116, -33, -7, -4, 24, 0, 13, -38, 44, 17, -51, 12, -11, 11, 27, 53, 8, -33, 22, 53, 25, 12, 0, 26, 25, 10, 5, 28, 26, -22, -17, 0, -68, -10, 19, 30, 73, -3, 35, -38, -11, 23, -13, -27, 13, 29, -5, -62, -15, -58, -31, -72, -17, 10, -5, 43, 29, 44, 14, -12, 41, 37, -11, -9, 9, -50, 28, -75, 6, -67, 0, 34, -5, -6, -11, -5, 24, -11, -32, 12, -19, 25, 8, 30, -3, -22, -15, -6, 24, -28, -22, -13, 28, -7, 0, 95, -7, -7, 58, -8, -42, 41, -40, 35, -76, -58, -3, 2, 13, 36, -23, -49, -51, 8, -14, -1, 8, 2, 4, -43, -67, -15, 15, 7, 38, 13, -16, -21, -26, 34, -16, 12, -26, 41, 2, -48, 19, 2, -58, -18, 2, 18, -21, -38, -26, 4, 19, 34, -14, 19, -27, -9, -4, 27, 4, -8, 28, 45, -5, -40, 39, -28, 0, 7, 11, -8, -17, -22, 44, -9, -47, -2, 6, 9, 36, 39, -8, -45, 10, 102, 7, -9, -18, 30, 17, 28, -19, -7, -25, 1, 7, 6, -127, -66, 31, -8, 62, 34, 32, -19, 21, 16, -48, 18, -13, 21, 16, -53, 17, -31, -29, -95, 0, -16, 2, 15, 37, 33, -2, 7, 2, 11, -10, 1, 33, -26, 22, -48, 66, -60, -34, 45, -1, -45, 12, -22, 0, -23, 8, 3, -33, -15, 33, 27, -2, 6, -36, 24, 4, -4, -59, 13, -14, -18, -11, 40, 67, 9, 58, 6, -26, -27, -35, 41, -43, -21, 15, -4, 16, 12, -29, -14, -7, -40, -6, -39, -20, 7, 28, -61, -40, -27, -32, 3, 37, 26, 23, -14, -21, 22, -31, 23, -37, 43, 48, -42, -4, 21, -27, -14, -5, 11, -8, -54, 19, 4, 1, 19, 18, 7, 1, -17, 4, 1, -47, 33, -37, 6, -14, -21, -37, -26, -29, -14, 6, -56, -7, -25, 5, 1, -46, 11, 15, -34, 50, 49, 30, 21, -11, 58, 29, 14, -23, 25, 17, -1, -26, 0, -16, -4, 12, 21, -9, 17, 22, 12, 76, 15, -3, -63, 14, 5, -50, -20, -11, -35, 21, -28, 15, -14, 22, -74, -8, -23, 2, 53, 56, -14, -20, 21, 22, 14, -20, -5, -48, -46, 70, -50, 35, -57, -35, 16, 7, -36, -3, -6, 4, 2, -39, 12, -13, 10, -20, 35, 12, 12, -4, 8, -18, -32, 16, 11, -1, -49, 1, 61, -6, 32, 69, 17, -24, -48, -25, 48, -73, -27, 1, 3, -8, 8, -55, -18, -18, -11, -10, 19, 1, -8, 8, -77, -73, -14, -52, -8, 49, 0, -22, 6, -7, 6, -27, 40, -22, 39, 24, -35, 23, 39, -46, 20, 0, 11, -3, -50, 7, 47, -4, 39, -17, -8, 8, 17, 60, 26, -8, -8, 1, 15, 2, -12, -12, -31, -6, 13, 24, 1, 26, -40, 25, -9, -21, -7, -6, -32, 31, 48, 45, 31, -33, 45, 5, -13, 10, 32, 6, -6, 2, 8, 34, 50, 22, -8, 30, -47, 40, -10, 75, -3, 13, -5, 25, 11, -18, 1, 13, 18, -20, -27, 17, 25, -18, -74, 8, -3, -6, 32, 1, 27, -3, 26, 46, 0, -23, 32, -49, -31, 64, -27, 15, -91, -9, 20, -12, -12, -4, 13, 11, -54, -27, 16, -15, 29, -23, 12, -16, 1, -21, -32, -19, -27, 11, -7, 32, -51, 19, 52, -4, 17, 84, 5, -56, -16, -41, 34, -40, -33, 27, -7, 4, -13, -29, -21, -47, -58, -2, -18, 23, 22, 23, -45, -47, 1, -23, -28, 25, 18, 11, -22, 55, 53, -23, -12, -15, 68, 26, -67, 4, 27, -35, -5, 0, -15, 21, -38, 25, -7, -30, 48, 9, 0, -43, -19, 23, 4, -37, -12, -86, 16, 5, -13, -18, -21, -30, 3, 13, 9, 26, -26, 14, -21, -16, -11, 14, -5, 28, 58, 32, 18, 8, 51, 2, -3, -19, 41, -5, 39, -56, 16, -8, 2, 14, 27, -30, 9, 35, 9, 34, -17, 48, -3, -13, 40, -35, -2, -3, 3, -16, -27, 16, 43, 4, -52, 1, 2, 1, 50, 49, 6, -25, 16, -1, 27, -18, -6, -78, -32, 53, -60, 43, -65, -28, 30, 4, -37, -7, 2, -8, -32, -36, 8, -17, -61, -1, 55, 3, 11, -26, -7, -7, -10, 44, 13, 1, -33, -4, 58, 9, 12, 93, -5, -44, -7, -37, 41, -84, -13, 3, -21, -3, 17, -42, -58, -33, -17, 34, -57, -12, 15, -27, -53, -24, -45, 19, -29, 34, -17, -24, -29, 47, 17, -18, 
  -38, 9, -80, 2, 49, -12, -88, 54, -12, 12, 5, -17, 53, -35, 6, -1, 6, -13, 17, 20, -28, -30, -17, 28, -9, -10, -22, -14, 64, 90, 36, 11, 16, -26, 21, -7, 17, -30, -5, 52, -6, 7, -38, -22, -80, -27, 15, -10, -42, -15, 9, -2, -39, -36, -17, 16, -33, -47, 7, 2, -12, 78, 4, -47, -35, -60, 6, -27, -4, -13, -20, 21, -11, 10, -24, -4, 47, -8, 36, 6, 72, 8, 11, -15, -50, -36, -19, -3, -24, -19, -23, 19, 7, 16, 43, -46, 51, -28, 65, 34, -35, -16, 34, -4, -13, -30, 52, 43, -51, 11, -10, 4, -67, -28, 12, 26, 8, -3, 20, 30, -13, -41, -24, 2, -94, 8, -10, -48, -1, 37, -2, 39, -32, 51, 59, 4, 21, 21, -17, 46, 66, 54, 4, -14, 27, -18, 3, -8, 41, 68, 33, -1, -8, -8, -35, -4, 34, 12, -52, 30, 2, 4, -57, -30, 35, -14, -21, 61, 21, -9, -9, 8, 46, 7, 25, -8, -34, -27, -9, 45, 25, -31, -41, 24, -2, 0, -57, -21, 48, -21, 13, 22, -21, -25, -8, 7, 9, -51, -7, 46, 23, -11, 8, 3, -34, -8, 34, -4, -70, -6, -16, -5, -24, 0, 3, 1, -11, 57, -15, -10, -3, 126, 39, -38, -28, -57, -29, -18, 17, -21, -3, 41, -9, -5, 6, -21, 65, -15, 46, -15, 69, -3, 8, -1, -11, -15, -17, -13, -8, -11, -19, 5, -7, -46, 29, -45, 46, -28, 75, 52, -30, -8, 50, -5, -9, 10, 21, 3, -33, 30, 55, 6, 2, -24, 19, -5, -15, 7, 30, 55, -7, 14, 34, -12, -45, -72, -43, -41, 6, 67, 54, 57, -29, 59, 18, 2, -18, -12, 4, 20, 32, 35, 53, 7, 60, 8, -28, -21, 64, 38, 20, 21, -12, -49, -59, -23, 26, 54, -29, 25, -4, 23, -85, -34, 51, 11, -40, 10, 22, 15, 6, 6, 90, -13, -7, -10, -20, 11, 14, 18, 32, 2, -10, 14, 8, 23, -4, 19, 26, 46, 4, 23, -9, 2, 35, 8, 1, -5, -6, 26, -2, 13, 16, -39, -54, -39, -8, -4, -71, 4, 22, 41, 0, -10, -9, 13, -13, -13, 5, 1, -32, 22, -28, -10, -22, -68, 11, -2, 48, -38, 0, 14, 16, 12, -6, -34, 17, 9, 18, 8, 92, 5, -20, 33, -37, -35, -8, 36, -14, -27, -20, 4, -25, 72, 52, -66, 60, -5, 76, 31, -14, -22, 39, 16, 22, -10, 33, 0, -45, 1, -18, -15, -36, 20, 1, -5, -5, -4, 27, -11, 13, 1, 27, 11, -44, 36, -34, -42, -35, 42, 24, 14, -40, 91, 1, -38, 7, 5, 3, 43, 45, 4, 28, -14, 15, -5, 8, 2, 86, 56, 28, 25, 15, -34, 11, -10, 26, -11, -28, 0, -30, 12, -37, -21, 21, -22, -48, 79, 14, 20, -28, -18, 27, 16, -32, 5, -13, 3, -7, -31, -43, -30, -11, -21, -21, 28, 12, -2, 36, 16, 33, 37, -6, -26, -10, -22, 28, -24, 10, 44, -21, -15, 34, -21, -57, -36, -21, 4, -71, -28, 8, 12, -31, 23, 8, 20, -10, -8, -14, 4, 0, -38, 5, -21, -25, -41, -17, -11, -2, -29, -17, 17, 23, -2, -1, 4, 31, 6, -2, 11, 82, 1, -19, 1, -57, -39, -7, -15, -5, -43, -29, 22, -26, 33, 6, -75, 36, -38, 68, 26, -61, -3, 32, 4, 10, -3, 15, 19, 13, -7, 10, 19, -35, -21, 23, -7, 7, 4, 1, -9, -18, -4, 38, 7, -50, 7, -17, -75, -8, 54, 24, 70, -53, 40, 56, -39, 2, 20, 7, 25, 31, 38, 45, 8, -5, -25, -26, 2, 60, 56, 2, 43, 23, -8, 8, 14, 15, -28, -47, 30, -5, 33, -72, -31, 71, 10, -26, 61, -23, -5, 6, -10, 35, -3, -9, 6, -50, 6, -3, 28, 36, -7, 13, 26, -4, 56, -31, -5, 20, 4, 46, 33, -33, -13, 9, -11, 52, -45, 0, 39, 16, 17, 6, -33, -78, -37, 26, 5, -72, -24, -15, 3, -31, -16, -20, 56, -3, 23, -21, -18, -9, 10, 19, 7, -10, -40, -20, -36, 16, -16, -8, 30, 17, -6, -26, 7, 43, -10, -43, -12, 59, 7, -21, -23, -48, -16, -8, -10, -10, 29, -40, 0, 28, 93, 72, -45, 89, -28, 89, 13, -30, 14, 45, -17, -20, 21, 13, 34, -17, 23, 62, -4, -63, 13, 7, 2, 22, -7, 37, -55, -9, -29, 24, -12, -25, -27, 12, -92, -15, 46, 12, 59, -30, 60, 41, 10, 6, 5, -6, 30, 37, 48, 9, 6, 23, -28, -4, -8, 48, 32, 45, -20, 22, -12, 18, 5, 11, -35, -23, 47, 
};
const TfArray<2, int> tensor_dimension9 = { 2, { 2,800 } };
const TfArray<1, float> quant9_scale = { 1, { 0.0037424834445118904, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[2] = { 3078, -3078, };
const TfArray<1, int> tensor_dimension10 = { 1, { 2 } };
const TfArray<1, float> quant10_scale = { 1, { 5.6258224503835663e-05, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,40,40,1 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0029411765281111002, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,40,40,8 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0044275540858507156, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,20,20,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.0044275540858507156, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,20,20,16 } };
const TfArray<1, float> quant14_scale = { 1, { 0.011382733471691608, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,10,10,16 } };
const TfArray<1, float> quant15_scale = { 1, { 0.011382733471691608, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,10,10,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.015032324008643627, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,5,5,32 } };
const TfArray<1, float> quant17_scale = { 1, { 0.015032324008643627, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<2, int> tensor_dimension18 = { 2, { 1,800 } };
const TfArray<1, float> quant18_scale = { 1, { 0.015032324008643627, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<2, int> tensor_dimension19 = { 2, { 1,2 } };
const TfArray<1, float> quant19_scale = { 1, { 0.11722079664468765, } };
const TfArray<1, int> quant19_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,2 } };
const TfArray<1, float> quant20_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 11 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 11,3,4 } };
const TfArray<1, int> outputs1 = { 1, { 12 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 12 } };
const TfArray<1, int> outputs2 = { 1, { 13 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 13,5,6 } };
const TfArray<1, int> outputs3 = { 1, { 14 } };
const TfLitePoolParams opdata4 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs4 = { 1, { 14 } };
const TfArray<1, int> outputs4 = { 1, { 15 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 15,7,8 } };
const TfArray<1, int> outputs5 = { 1, { 16 } };
const TfLitePoolParams opdata6 = { kTfLitePaddingSame, 2,2, 2,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs6 = { 1, { 16 } };
const TfArray<1, int> outputs6 = { 1, { 17 } };
const TfLiteReshapeParams opdata7 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs7 = { 2, { 17,2 } };
const TfArray<1, int> outputs7 = { 1, { 18 } };
const TfLiteFullyConnectedParams opdata8 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs8 = { 3, { 18,9,10 } };
const TfArray<1, int> outputs8 = { 1, { 19 } };
const TfLiteSoftmaxParams opdata9 = { 1 };
const TfArray<1, int> inputs9 = { 1, { 19 } };
const TfArray<1, int> outputs9 = { 1, { 20 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 12800, (TfLiteIntArray*)&tensor_dimension11, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 12800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 12800, (TfLiteIntArray*)&tensor_dimension13, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 6400, (TfLiteIntArray*)&tensor_dimension15, 1600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 21;
  for(size_t i = 0; i < 21; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 10; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 10; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  20, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 10; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
